// src/utils/emailBuilder.ts
import { supportTiers } from '../data/supportTiers';
import { CustomerInfo } from './templateGenerator';

/**
 * Email Builder Module with multilingual support
 * Handles the creation and formatting of email content with enhanced
 * formatting for better compatibility with email clients like Outlook
 */
export interface EmailFormData {
  companyName: string;
  contactName: string;
  contactEmail: string;
  proposedDate: Date | string;
  tenantId: string;
  selectedTier: string;
  emailContacts: { name: string; email: string; phone: string }[];
  to: string;
  cc?: string;
  subject?: string;
  gdap: {
    checked: boolean;
    deadline: string;
    roles: string;
    link: string;
  };
  rbac: {
    checked: boolean;
    groups: string;
    tenantId: string;
    azure: boolean;
    m365: boolean;
    includeScript: boolean;
  };
  conditionalAccess: {
    checked: boolean;
    mfa: boolean;
    location: boolean;
    device: boolean;
    signIn: boolean;
  };
  authorizedContacts: {
    checked: boolean;
    roles: string;
  };
  meetingDate?: string;
  additionalNotes?: string;
  senderName: string;
  senderTitle: string;
  senderCompany: string;
  senderContact?: string;
  currentDate: string;
  language?: string; // Added language field
}

/**
 * Type for translations
 */
export interface Translations {
  [key: string]: string;
}

/**
 * Available languages
 */
export type Language = 'en' | 'de' | 'fr';

/**
 * Translations for various languages
 */
const translations: Record<Language, Translations> = {
  en: {
    // Email general
    'subject': '{tier} Support Plan Onboarding for {company} - Microsoft 365 Administration Setup',
    'greeting': 'Dear {name},',
    'intro1': 'Thank you for choosing {company} as your Microsoft 365 administration partner. We are excited to begin the onboarding process for {clientCompany}.',
    'intro2': 'Below are the important steps to complete your onboarding process. Please review each section carefully and follow the instructions to set up your {tier} Support Plan and the necessary access configurations.',
    'closing': 'Please reply to this email to confirm receipt and let us know if you have any questions or concerns.',
    'regards': 'Best regards,',
    'footer': 'This is an automated message generated by the Microsoft Onboarding Template Generator.',
    
    // Section titles
    'supportPlanTitle': '{tier} SUPPORT PLAN DETAILS',
    'authorizedContactsTitle': 'ACTION REQUIRED: AUTHORIZED CONTACTS',
    'tenantTitle': 'ACTION REQUIRED: TENANT INFORMATION',
    'gdapTitle': 'ACTION REQUIRED: GDAP DELEGATION',
    'rbacTitle': 'ACTION REQUIRED: RBAC CONFIGURATION',
    'conditionalAccessTitle': 'RECOMMENDED: CONDITIONAL ACCESS POLICIES',
    'meetingTitle': 'SCHEDULED: ONBOARDING MEETING',
    'additionalInfoTitle': 'ADDITIONAL INFORMATION',
    
    // Support plan section
    'supportPlanIntro': 'The {tier} Support Plan provides {supportType} with the following features:',
    'supportType.bronze': 'basic support availability for non-urgent cases, with no Critical Situation coverage',
    'supportType.other': 'comprehensive support with Critical Situation coverage',
    'supportTypeLabel': 'Support Type:',
    'supportHoursLabel': 'Support Hours:',
    'severityLevelsLabel': 'Severity Levels:',
    'contactsLabel': 'Authorized Contacts:',
    'tenantsLabel': 'Tenants:',
    'requestsLabel': 'Support Requests:',
    'criticalLabel': 'Critical Situation Support:',
    'yes': 'Yes',
    'no': 'No',
    
    // Contacts section
    'contactsIntro': 'Based on your {tier} Support Plan, you can designate up to {count} authorized contacts for your organization. These contacts will be authorized to submit support requests and approve administrative changes to your Microsoft 365 environment.',
    'contactsRolesIntro': 'We recommend designating individuals for the following roles: {roles}.',
    'contactsInstruction': 'Please complete the following table with the required information for each contact:',
    'contactsNote': 'Note: Your {tier} plan includes {count} authorized contacts. Additional contacts can be managed through our customer portal after initial setup.',
    
    // Table headers
    'numberHeader': '#',
    'firstNameHeader': 'First Name',
    'lastNameHeader': 'Last Name',
    'officePhoneHeader': 'Office Phone',
    'mobilePhoneHeader': 'Mobile Phone',
    'emailHeader': 'Email Address',
    'jobTitleHeader': 'Job Title',
    
    // Meeting section
    'meetingIntro': 'We have scheduled an onboarding meeting to discuss these items in detail and answer any questions you may have:',
    'meetingDate': 'Date: {date}',
    'meetingAttendees': 'Please ensure the appropriate team members can attend this meeting.',
    
    // GDAP section
    'gdapIntro': 'Microsoft now requires partners to use GDAP for secure administrative access. We need to implement this by {deadline}.',
    'gdapRoles': 'We will request the "{roles}" role.',
    'gdapPermission': 'This permission will allow us to provide the support services outlined in our agreement while maintaining security best practices.',
    'gdapInstruction': 'Please visit the following link to approve the GDAP relationship:',
    'gdapLink': 'GDAP Approval Link',
    
    // RBAC section
    'rbacIntro': 'We will configure {groups} to ensure users have the appropriate level of access to your environment based on their job functions.',
    'rbacPermissionBoth': 'This includes both Azure and Microsoft 365 access permissions.',
    'rbacPermissionAzure': 'This includes Azure resources access permissions.',
    'rbacPermission365': 'This includes Microsoft 365 service access permissions.',
    'rbacInstruction': 'Please complete the following steps to configure RBAC permissions:',
    'rbacStep1': 'STEP 1: Install Azure PowerShell',
    'rbacStep1Source': 'Source:',
    'rbacStep2': 'STEP 2: Update the tenant and run the following script',
    'rbacStep2Instruction': 'Copy and paste this complete script into your PowerShell console',
    'rbacScriptHeader': 'PowerShell Script (Copy and paste into PowerShell console)',
    'rbacScreenshot': 'Please send us a screenshot of the result of the above script or let us know if you prefer to schedule a Teams meeting to complete this configuration together.',
    
    // Conditional Access section
    'conditionalAccessIntro': 'We recommend implementing the following security policies for your environment:',
    'mfaPolicy': 'Multi-Factor Authentication (MFA) requirements for all users',
    'locationPolicy': 'Location-based access restrictions',
    'devicePolicy': 'Device compliance policies to ensure only secure devices can access your data',
    'signInPolicy': 'Sign-in risk-based policies to prevent suspicious login attempts'
  },
  
  de: {
    // Email general
    'subject': '{tier} Support-Plan Onboarding für {company} - Microsoft 365 Administrationseinrichtung',
    'greeting': 'Sehr geehrte(r) {name},',
    'intro1': 'Vielen Dank, dass Sie sich für {company} als Ihren Microsoft 365-Administrationspartner entschieden haben. Wir freuen uns, den Onboarding-Prozess für {clientCompany} zu beginnen.',
    'intro2': 'Nachfolgend finden Sie die wichtigen Schritte zum Abschluss Ihres Onboarding-Prozesses. Bitte prüfen Sie jeden Abschnitt sorgfältig und folgen Sie den Anweisungen zur Einrichtung Ihres {tier} Support-Plans und der notwendigen Zugriffskonfigurationen.',
    'closing': 'Bitte antworten Sie auf diese E-Mail, um den Erhalt zu bestätigen, und lassen Sie uns wissen, wenn Sie Fragen oder Bedenken haben.',
    'regards': 'Mit freundlichen Grüßen,',
    'footer': 'Dies ist eine automatisch generierte Nachricht des Microsoft Onboarding Template Generators.',
    
    // Section titles
    'supportPlanTitle': '{tier} SUPPORT-PLAN DETAILS',
    'authorizedContactsTitle': 'ERFORDERLICHE AKTION: AUTORISIERTE KONTAKTE',
    'tenantTitle': 'ERFORDERLICHE AKTION: TENANT-INFORMATIONEN',
    'gdapTitle': 'ERFORDERLICHE AKTION: GDAP-DELEGATION',
    'rbacTitle': 'ERFORDERLICHE AKTION: RBAC-KONFIGURATION',
    'conditionalAccessTitle': 'EMPFOHLEN: RICHTLINIEN FÜR BEDINGTEN ZUGRIFF',
    'meetingTitle': 'GEPLANT: ONBOARDING-MEETING',
    'additionalInfoTitle': 'ZUSÄTZLICHE INFORMATIONEN',
    
    // Support plan section
    'supportPlanIntro': 'Der {tier} Support-Plan bietet {supportType} mit den folgenden Funktionen:',
    'supportType.bronze': 'grundlegende Support-Verfügbarkeit für nicht dringende Fälle, ohne Abdeckung kritischer Situationen',
    'supportType.other': 'umfassenden Support mit Abdeckung kritischer Situationen',
    'supportTypeLabel': 'Support-Typ:',
    'supportHoursLabel': 'Support-Zeiten:',
    'severityLevelsLabel': 'Schweregrade:',
    'contactsLabel': 'Autorisierte Kontakte:',
    'tenantsLabel': 'Tenants:',
    'requestsLabel': 'Support-Anfragen:',
    'criticalLabel': 'Unterstützung bei kritischen Situationen:',
    'yes': 'Ja',
    'no': 'Nein',
    
    // Contacts section
    'contactsIntro': 'Basierend auf Ihrem {tier} Support-Plan können Sie bis zu {count} autorisierte Kontakte für Ihre Organisation benennen. Diese Kontakte werden berechtigt sein, Support-Anfragen zu stellen und administrative Änderungen in Ihrer Microsoft 365-Umgebung zu genehmigen.',
    'contactsRolesIntro': 'Wir empfehlen, Personen für die folgenden Rollen zu benennen: {roles}.',
    'contactsInstruction': 'Bitte füllen Sie die folgende Tabelle mit den erforderlichen Informationen für jeden Kontakt aus:',
    'contactsNote': 'Hinweis: Ihr {tier}-Plan umfasst {count} autorisierte Kontakte. Zusätzliche Kontakte können nach der Ersteinrichtung über unser Kundenportal verwaltet werden.',
    
    // Table headers
    'numberHeader': 'Nr.',
    'firstNameHeader': 'Vorname',
    'lastNameHeader': 'Nachname',
    'officePhoneHeader': 'Bürotelefon',
    'mobilePhoneHeader': 'Mobiltelefon',
    'emailHeader': 'E-Mail-Adresse',
    'jobTitleHeader': 'Berufsbezeichnung',
    
    // Meeting section
    'meetingIntro': 'Wir haben ein Onboarding-Meeting geplant, um diese Punkte im Detail zu besprechen und Ihre Fragen zu beantworten:',
    'meetingDate': 'Datum: {date}',
    'meetingAttendees': 'Bitte stellen Sie sicher, dass die entsprechenden Teammitglieder an diesem Meeting teilnehmen können.',
    
    // GDAP section
    'gdapIntro': 'Microsoft verlangt jetzt von Partnern die Verwendung von GDAP für sicheren administrativen Zugriff. Wir müssen dies bis zum {deadline} implementieren.',
    'gdapRoles': 'Wir werden die Rolle "{roles}" beantragen.',
    'gdapPermission': 'Diese Berechtigung ermöglicht es uns, die in unserer Vereinbarung festgelegten Support-Dienste zu erbringen und gleichzeitig die Best Practices für Sicherheit einzuhalten.',
    'gdapInstruction': 'Bitte besuchen Sie den folgenden Link, um die GDAP-Beziehung zu genehmigen:',
    'gdapLink': 'GDAP-Genehmigungslink',
    
    // RBAC section
    'rbacIntro': 'Wir werden {groups} konfigurieren, um sicherzustellen, dass Benutzer über die entsprechenden Zugriffsebenen für Ihre Umgebung auf Basis ihrer Jobfunktionen verfügen.',
    'rbacPermissionBoth': 'Dies umfasst sowohl Azure- als auch Microsoft 365-Zugriffsberechtigungen.',
    'rbacPermissionAzure': 'Dies umfasst Zugriffsberechtigungen für Azure-Ressourcen.',
    'rbacPermission365': 'Dies umfasst Zugriffsberechtigungen für Microsoft 365-Dienste.',
    'rbacInstruction': 'Bitte führen Sie die folgenden Schritte aus, um RBAC-Berechtigungen zu konfigurieren:',
    'rbacStep1': 'SCHRITT 1: Installation von Azure PowerShell',
    'rbacStep1Source': 'Quelle:',
    'rbacStep2': 'SCHRITT 2: Aktualisieren Sie den Tenant und führen Sie das folgende Skript aus',
    'rbacStep2Instruction': 'Kopieren und fügen Sie dieses vollständige Skript in Ihre PowerShell-Konsole ein',
    'rbacScriptHeader': 'PowerShell-Skript (Kopieren und in die PowerShell-Konsole einfügen)',
    'rbacScreenshot': 'Bitte senden Sie uns einen Screenshot des Ergebnisses des obigen Skripts oder teilen Sie uns mit, ob Sie lieber ein Teams-Meeting planen möchten, um diese Konfiguration gemeinsam durchzuführen.',
    
    // Conditional Access section
    'conditionalAccessIntro': 'Wir empfehlen die Implementierung der folgenden Sicherheitsrichtlinien für Ihre Umgebung:',
    'mfaPolicy': 'Multi-Faktor-Authentifizierung (MFA) für alle Benutzer',
    'locationPolicy': 'Standortbasierte Zugriffsbeschränkungen',
    'devicePolicy': 'Gerätekonformitätsrichtlinien, um sicherzustellen, dass nur sichere Geräte auf Ihre Daten zugreifen können',
    'signInPolicy': 'Anmelderisiko-basierte Richtlinien zur Verhinderung verdächtiger Anmeldeversuche'
  },
  
  fr: {
    // Email general
    'subject': 'Intégration du Plan de Support {tier} pour {company} - Configuration Administrative Microsoft 365',
    'greeting': 'Cher/Chère {name},',
    'intro1': 'Merci d\'avoir choisi {company} comme partenaire d\'administration Microsoft 365. Nous sommes ravis de commencer le processus d\'intégration pour {clientCompany}.',
    'intro2': 'Vous trouverez ci-dessous les étapes importantes pour compléter votre processus d\'intégration. Veuillez examiner attentivement chaque section et suivre les instructions pour configurer votre Plan de Support {tier} et les configurations d\'accès nécessaires.',
    'closing': 'Veuillez répondre à cet e-mail pour confirmer sa réception et nous faire part de vos questions ou préoccupations.',
    'regards': 'Cordialement,',
    'footer': 'Ceci est un message généré automatiquement par le Générateur de Modèles d\'Intégration Microsoft.',
    
    // Section titles
    'supportPlanTitle': 'DÉTAILS DU PLAN DE SUPPORT {tier}',
    'authorizedContactsTitle': 'ACTION REQUISE : CONTACTS AUTORISÉS',
    'tenantTitle': 'ACTION REQUISE : INFORMATIONS DU TENANT',
    'gdapTitle': 'ACTION REQUISE : DÉLÉGATION GDAP',
    'rbacTitle': 'ACTION REQUISE : CONFIGURATION RBAC',
    'conditionalAccessTitle': 'RECOMMANDÉ : POLITIQUES D\'ACCÈS CONDITIONNEL',
    'meetingTitle': 'PLANIFIÉ : RÉUNION D\'INTÉGRATION',
    'additionalInfoTitle': 'INFORMATIONS SUPPLÉMENTAIRES',
    
    // Support plan section
    'supportPlanIntro': 'Le Plan de Support {tier} offre {supportType} avec les fonctionnalités suivantes :',
    'supportType.bronze': 'une disponibilité de support de base pour les cas non urgents, sans couverture des situations critiques',
    'supportType.other': 'un support complet avec couverture des situations critiques',
    'supportTypeLabel': 'Type de support :',
    'supportHoursLabel': 'Heures de support :',
    'severityLevelsLabel': 'Niveaux de gravité :',
    'contactsLabel': 'Contacts autorisés :',
    'tenantsLabel': 'Tenants :',
    'requestsLabel': 'Demandes de support :',
    'criticalLabel': 'Support pour situations critiques :',
    'yes': 'Oui',
    'no': 'Non',
    
    // Contacts section
    'contactsIntro': 'Selon votre Plan de Support {tier}, vous pouvez désigner jusqu\'à {count} contacts autorisés pour votre organisation. Ces contacts seront autorisés à soumettre des demandes de support et à approuver les modifications administratives dans votre environnement Microsoft 365.',
    'contactsRolesIntro': 'Nous recommandons de désigner des personnes pour les rôles suivants : {roles}.',
    'contactsInstruction': 'Veuillez compléter le tableau suivant avec les informations requises pour chaque contact :',
    'contactsNote': 'Remarque : Votre plan {tier} inclut {count} contacts autorisés. Des contacts supplémentaires peuvent être gérés via notre portail client après la configuration initiale.',
    
    // Table headers
    'numberHeader': 'N°',
    'firstNameHeader': 'Prénom',
    'lastNameHeader': 'Nom',
    'officePhoneHeader': 'Téléphone bureau',
    'mobilePhoneHeader': 'Téléphone mobile',
    'emailHeader': 'Adresse e-mail',
    'jobTitleHeader': 'Fonction',
    
    // Meeting section
    'meetingIntro': 'Nous avons planifié une réunion d\'intégration pour discuter de ces éléments en détail et répondre à vos questions :',
    'meetingDate': 'Date : {date}',
    'meetingAttendees': 'Veuillez vous assurer que les membres appropriés de votre équipe peuvent assister à cette réunion.',
    
    // GDAP section
    'gdapIntro': 'Microsoft exige désormais que les partenaires utilisent GDAP pour un accès administratif sécurisé. Nous devons mettre cela en œuvre d\'ici le {deadline}.',
    'gdapRoles': 'Nous demanderons le rôle "{roles}".',
    'gdapPermission': 'Cette autorisation nous permettra de fournir les services de support décrits dans notre accord tout en maintenant les meilleures pratiques de sécurité.',
    'gdapInstruction': 'Veuillez visiter le lien suivant pour approuver la relation GDAP :',
    'gdapLink': 'Lien d\'approbation GDAP',
    
    // RBAC section
    'rbacIntro': 'Nous configurerons {groups} pour garantir que les utilisateurs disposent du niveau d\'accès approprié à votre environnement en fonction de leurs rôles professionnels.',
    'rbacPermissionBoth': 'Cela inclut des autorisations d\'accès pour Azure et Microsoft 365.',
    'rbacPermissionAzure': 'Cela inclut des autorisations d\'accès aux ressources Azure.',
    'rbacPermission365': 'Cela inclut des autorisations d\'accès aux services Microsoft 365.',
    'rbacInstruction': 'Veuillez suivre les étapes suivantes pour configurer les autorisations RBAC :',
    'rbacStep1': 'ÉTAPE 1 : Installation d\'Azure PowerShell',
    'rbacStep1Source': 'Source :',
    'rbacStep2': 'ÉTAPE 2 : Mettez à jour le tenant et exécutez le script suivant',
    'rbacStep2Instruction': 'Copiez et collez ce script complet dans votre console PowerShell',
    'rbacScriptHeader': 'Script PowerShell (Copier et coller dans la console PowerShell)',
    'rbacScreenshot': 'Veuillez nous envoyer une capture d\'écran du résultat du script ci-dessus ou nous indiquer si vous préférez planifier une réunion Teams pour effectuer cette configuration ensemble.',
    
    // Conditional Access section
    'conditionalAccessIntro': 'Nous recommandons la mise en œuvre des politiques de sécurité suivantes pour votre environnement :',
    'mfaPolicy': 'Exigences d\'authentification multifacteur (MFA) pour tous les utilisateurs',
    'locationPolicy': 'Restrictions d\'accès basées sur la localisation',
    'devicePolicy': 'Politiques de conformité des appareils pour garantir que seuls les appareils sécurisés peuvent accéder à vos données',
    'signInPolicy': 'Politiques basées sur le risque de connexion pour prévenir les tentatives de connexion suspectes'
  }
};

export const emailBuilder = {
  /**
   * Get translation for a key in the specified language
   * @param key - The translation key
   * @param language - The language code (en, de, fr)
   * @param replacements - Optional replacements for placeholders
   * @returns The translated string
   */
  translate: function(key: string, language: Language = 'en', replacements?: Record<string, string | number>) {
    const langTranslations = translations[language] || translations.en;
    let result = langTranslations[key] || translations.en[key] || key;
    
    // Special handling for support type based on tier
    if (key === 'supportType' && replacements?.tier) {
      const tierKey = `supportType.${replacements.tier}`;
      if (langTranslations[tierKey]) {
        result = langTranslations[tierKey];
      } else if (langTranslations['supportType.other']) {
        result = langTranslations['supportType.other'];
      }
    }
    
    // Replace placeholders
    if (replacements) {
      Object.keys(replacements).forEach(placeholder => {
        const value = replacements[placeholder];
        result = result.replace(new RegExp(`{${placeholder}}`, 'g'), String(value));
      });
    }
    
    return result;
  },
  
  /**
   * Format script blocks for better copy-paste compatibility with email clients
   */
  formatScriptBlock: function(scriptContent: string, language: Language = 'en'): string {
    // Clean up the script content
    const cleanedScript = scriptContent.trim()
      .replace(/\t/g, '    ') // Replace tabs with spaces for consistency
      .replace(/^\s*\n/gm, ''); // Remove empty lines
    
    // Get translation for script header
    const scriptHeader = this.translate('rbacScriptHeader', language);
    
    // Plain pre-formatted text works better for copy-paste than styled HTML with syntax highlighting
    return `
      <table width="100%" cellpadding="0" cellspacing="0" border="0" class="powershell-script-container" style="border-collapse: collapse; margin: 25px 0; border: 1px solid #ddd; border-radius: 6px; overflow: hidden; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">
        <tr>
          <td style="padding: 0;">
            <table width="100%" cellpadding="0" cellspacing="0" border="0" style="border-collapse: collapse;">
              <tr>
                <td style="padding: 12px 16px; background-color: #2b579a; color: white; font-family: 'Segoe UI', Arial, sans-serif; font-size: 14px; font-weight: 600;">
                  ${scriptHeader}
                </td>
              </tr>
              <tr>
                <td style="background-color: #f8f8f8; padding: 16px;">
                  <pre style="margin: 0; font-family: Consolas, Monaco, 'Courier New', monospace; font-size: 13px; line-height: 1.5; white-space: pre-wrap; overflow-wrap: break-word;">${cleanedScript}</pre>
                </td>
              </tr>
            </table>
          </td>
        </tr>
      </table>`;
  },

  /**
   * Create a multi-column table compatible with Outlook
   * This table is designed to be copied and pasted with formatting preserved
   * @param {number} rows - The number of rows to create in the table
   * @returns {string} - HTML for the contacts table
   */
  createContactsTable: function(rows: number, language: Language = 'en'): string {
    // Get translated headers
    const numberHeader = this.translate('numberHeader', language);
    const firstNameHeader = this.translate('firstNameHeader', language);
    const lastNameHeader = this.translate('lastNameHeader', language);
    const officePhoneHeader = this.translate('officePhoneHeader', language);
    const mobilePhoneHeader = this.translate('mobilePhoneHeader', language);
    const emailHeader = this.translate('emailHeader', language);
    const jobTitleHeader = this.translate('jobTitleHeader', language);
    
    // Create headers
    let tableHTML = `
    <table class="contacts-table" width="100%" cellpadding="0" cellspacing="0" border="1" style="border-collapse: collapse; margin: 25px 0; mso-table-lspace: 0pt; mso-table-rspace: 0pt;">
      <tr style="background-color: #f0f0f0;">
        <th style="border: 1px solid #ddd; padding: 10px; text-align: left; font-family: 'Segoe UI', Arial, sans-serif; font-weight: bold; background-color: #f0f0f0;">${numberHeader}</th>
        <th style="border: 1px solid #ddd; padding: 10px; text-align: left; font-family: 'Segoe UI', Arial, sans-serif; font-weight: bold; background-color: #f0f0f0;">${firstNameHeader}</th>
        <th style="border: 1px solid #ddd; padding: 10px; text-align: left; font-family: 'Segoe UI', Arial, sans-serif; font-weight: bold; background-color: #f0f0f0;">${lastNameHeader}</th>
        <th style="border: 1px solid #ddd; padding: 10px; text-align: left; font-family: 'Segoe UI', Arial, sans-serif; font-weight: bold; background-color: #f0f0f0;">${officePhoneHeader}</th>
        <th style="border: 1px solid #ddd; padding: 10px; text-align: left; font-family: 'Segoe UI', Arial, sans-serif; font-weight: bold; background-color: #f0f0f0;">${mobilePhoneHeader}</th>
        <th style="border: 1px solid #ddd; padding: 10px; text-align: left; font-family: 'Segoe UI', Arial, sans-serif; font-weight: bold; background-color: #f0f0f0;">${emailHeader}</th>
        <th style="border: 1px solid #ddd; padding: 10px; text-align: left; font-family: 'Segoe UI', Arial, sans-serif; font-weight: bold; background-color: #f0f0f0;">${jobTitleHeader}</th>
      </tr>`;
    
    // Create empty rows
    for (let i = 1; i <= rows; i++) {
      const bgColor = i % 2 === 0 ? '#f9f9f9' : '#ffffff';
      tableHTML += `
      <tr style="background-color: ${bgColor};">
        <td style="border: 1px solid #ddd; padding: 10px; font-family: 'Segoe UI', Arial, sans-serif; font-weight: normal;">${i}</td>
        <td style="border: 1px solid #ddd; padding: 10px; font-family: 'Segoe UI', Arial, sans-serif; font-weight: normal;"></td>
        <td style="border: 1px solid #ddd; padding: 10px; font-family: 'Segoe UI', Arial, sans-serif; font-weight: normal;"></td>
        <td style="border: 1px solid #ddd; padding: 10px; font-family: 'Segoe UI', Arial, sans-serif; font-weight: normal;"></td>
        <td style="border: 1px solid #ddd; padding: 10px; font-family: 'Segoe UI', Arial, sans-serif; font-weight: normal;"></td>
        <td style="border: 1px solid #ddd; padding: 10px; font-family: 'Segoe UI', Arial, sans-serif; font-weight: normal;"></td>
        <td style="border: 1px solid #ddd; padding: 10px; font-family: 'Segoe UI', Arial, sans-serif; font-weight: normal;"></td>
      </tr>`;
    }
    
    tableHTML += `
    </table>`;
    
    return tableHTML;
  },

  /**
   * Create a section header with tier-specific styling
   */
  createSectionHeader: function(title: string, color: string): string {
    return `
    <table width="100%" cellpadding="0" cellspacing="0" border="0" style="border-collapse: collapse; margin: 35px 0 20px 0;">
      <tr>
        <td style="padding: 0;">
          <table width="100%" cellpadding="0" cellspacing="0" border="0" style="border-collapse: collapse; background-color: #f8f8f8; border-left: 4px solid ${color}; border-radius: 0 4px 4px 0;">
            <tr>
              <td style="padding: 16px;">
                <h3 style="color: #333333; font-family: 'Segoe UI', Arial, sans-serif; font-size: 18px; margin: 0; padding: 0; font-weight: 600;">${title}</h3>
              </td>
            </tr>
          </table>
        </td>
      </tr>
    </table>`;
  },

  /**
   * Create an info box with visual styling for instructions
   */
  createInstructionBox: function(title: string, content: string): string {
    return `
    <table width="100%" cellpadding="0" cellspacing="0" border="0" style="border-collapse: collapse; margin: 20px 0;">
      <tr>
        <td style="padding: 0;">
          <table width="100%" cellpadding="0" cellspacing="0" border="0" style="border-collapse: collapse; background-color: #f0f7ff; border: 1px solid #cfe5ff; border-radius: 4px;">
            <tr>
              <td style="padding: 16px; font-family: 'Segoe UI', Arial, sans-serif; font-size: 14px; line-height: 1.5; color: #333;">
                <div style="font-weight: bold; color: #0078D4; margin-bottom: 8px; font-size: 15px;">${title}</div>
                <div style="color: #333;">${content}</div>
              </td>
            </tr>
          </table>
        </td>
      </tr>
    </table>`;
  },
  
  /**
   * Create a step indicator for numbered instructions
   */
  createStepIndicator: function(number: number, title: string): string {
    return `
    <table width="100%" cellpadding="0" cellspacing="0" border="0" style="border-collapse: collapse; margin: 25px 0 15px 0;">
      <tr>
        <td style="padding: 0; vertical-align: middle;">
          <table cellpadding="0" cellspacing="0" border="0" style="border-collapse: collapse;">
            <tr>
              <td style="width: 36px; height: 36px; background-color: #0078D4; border-radius: 50%; text-align: center; vertical-align: middle;">
                <span style="color: white; font-family: 'Segoe UI', Arial, sans-serif; font-size: 18px; font-weight: bold;">${number}</span>
              </td>
              <td style="padding-left: 12px;">
                <span style="font-family: 'Segoe UI', Arial, sans-serif; font-size: 16px; font-weight: 600; color: #333;">${title}</span>
              </td>
            </tr>
          </table>
        </td>
      </tr>
    </table>`;
  },
  
  /**
   * Build the plain text version of the email body
   * @param {EmailFormData} formData - The form data from the UI
   * @returns {String} - Plain text email content
   */
  buildEmailBody: function(formData: EmailFormData): string {
    // Get the selected tier and language
    const tier = supportTiers[formData.selectedTier];
    const language = (formData.language || 'en') as Language;
    
    // Start with greeting
    let body = this.translate('greeting', language, { name: formData.contactName }) + '\n\n';
    
    // Introduction
    body += this.translate('intro1', language, { 
      company: formData.senderCompany,
      clientCompany: formData.companyName
    }) + '\n\n';
    
    body += this.translate('intro2', language, { 
      tier: tier.name
    }) + '\n\n';
    
    // Support Plan Section
    body += `**${this.translate('supportPlanTitle', language, { tier: tier.name.toUpperCase() })}**\n\n`;
    
    const supportType = formData.selectedTier === 'bronze' 
      ? this.translate('supportType.bronze', language)
      : this.translate('supportType.other', language);
    
    body += this.translate('supportPlanIntro', language, { 
      tier: tier.name,
      supportType: supportType
    }) + '\n\n';
    
    // Support plan details
    body += `• ${this.translate('supportTypeLabel', language)} ${formData.selectedTier === 'bronze' ? 'Microsoft Flexible Support' : 'Microsoft Premier Support'}\n`;
    body += `• ${this.translate('supportHoursLabel', language)} ${tier.supportHours}\n`;
    body += `• ${this.translate('severityLevelsLabel', language)} ${formData.selectedTier === 'bronze' ? 'Level B or C' : 'Level A, B or C'}\n`;
    body += `• ${this.translate('contactsLabel', language)} ${tier.authorizedContacts}\n`;
    body += `• ${this.translate('tenantsLabel', language)} ${tier.tenants}\n`;
    body += `• ${this.translate('requestsLabel', language)} ${tier.supportRequestsIncluded}\n`;
    body += `• ${this.translate('criticalLabel', language)} ${tier.criticalSituation ? this.translate('yes', language) : this.translate('no', language)}\n\n`;
    
    // Authorized Contacts Section
    if (formData.authorizedContacts.checked) {
      body += `**${this.translate('authorizedContactsTitle', language)}**\n\n`;
      
      body += this.translate('contactsIntro', language, { 
        tier: tier.name,
        count: tier.authorizedContacts
      }) + '\n\n';
      
      body += this.translate('contactsRolesIntro', language, { 
        roles: formData.authorizedContacts.roles
      }) + '\n\n';
      
      body += this.translate('contactsInstruction', language) + '\n\n';
      
      // Simple text table for authorized contacts
      body += `#  | ${this.translate('firstNameHeader', language)} | ${this.translate('lastNameHeader', language)} | ${this.translate('officePhoneHeader', language)} | ${this.translate('mobilePhoneHeader', language)} | ${this.translate('emailHeader', language)} | ${this.translate('jobTitleHeader', language)}\n`;
      body += `---|--------------------|------------------|----------------------|----------------------|------------------|------------------\n`;
      
      // Add empty rows
      const rows = Math.min(tier.authorizedContacts, 10);
      for (let i = 1; i <= rows; i++) {
        body += `${i}  |                    |                  |                      |                      |                  |                  \n`;
      }
      body += '\n';
      
      if (tier.authorizedContacts > 10) {
        body += this.translate('contactsNote', language, { 
          tier: tier.name,
          count: tier.authorizedContacts
        }) + '\n\n';
      }
    }
    
    // Meeting Section
    if (formData.meetingDate) {
      body += `**${this.translate('meetingTitle', language)}**\n\n`;
      
      body += this.translate('meetingIntro', language) + '\n\n';
      body += this.translate('meetingDate', language, { date: formData.meetingDate }) + '\n';
      body += this.translate('meetingAttendees', language) + '\n\n';
    }
    
    // GDAP Section
    if (formData.gdap.checked) {
      body += `**${this.translate('gdapTitle', language)}**\n\n`;
      
      body += this.translate('gdapIntro', language, { deadline: formData.gdap.deadline }) + '\n';
      body += this.translate('gdapRoles', language, { roles: formData.gdap.roles }) + '\n';
      body += this.translate('gdapPermission', language) + '\n\n';
      
      body += this.translate('gdapInstruction', language) + '\n';
      body += formData.gdap.link + '\n\n';
    }
    
    // RBAC Section
    if (formData.rbac.checked) {
      body += `**${this.translate('rbacTitle', language)}**\n\n`;
      
      body += this.translate('rbacIntro', language, { groups: formData.rbac.groups }) + ' ';
      
      if (formData.rbac.azure && formData.rbac.m365) {
        body += this.translate('rbacPermissionBoth', language);
      } else if (formData.rbac.azure) {
        body += this.translate('rbacPermissionAzure', language);
      } else if (formData.rbac.m365) {
        body += this.translate('rbacPermission365', language);
      }
      
      body += '\n\n';
      
      if (formData.rbac.includeScript) {
        body += this.translate('rbacInstruction', language) + '\n\n';
        
        body += `1. ${this.translate('rbacStep1', language)}\n`;
        body += `   ${this.translate('rbacStep1Source', language)} https://docs.microsoft.com/en-us/powershell/azure/install-az-ps?view=azps-6.6.0\n\n`;
        body += `   Install-Module -Name Az -Repository PSGallery -Force\n\n`;
        body += `   or update it:\n\n`;
        body += `   Update-Module Az.Resources -Force\n\n`;
        
        body += `2. ${this.translate('rbacStep2', language)}\n`;
        body += `   ${this.translate('rbacStep2Instruction', language)}\n\n`;
        
        body += `# Connect to the correct tenant\n`;
        body += `Connect-AzAccount -TenantID ${formData.rbac.tenantId}\n\n`;
        body += `$subscriptions = Get-AzSubscription\n`;
        body += `foreach ($subscription in $subscriptions) {\n`;
        body += `    Set-AzContext -SubscriptionId $subscription.Id \n`;
        body += `    # Add the Support Request Contributor role to Foreign Principal HelpDeskAgents:\n`;
        body += `    New-AzRoleAssignment -ObjectID b6770181-d9f5-4818-b5b1-ea51cd9f66e5 -RoleDefinitionName "Support Request Contributor" -ObjectType "ForeignGroup" -ErrorAction SilentlyContinue \n`;
        body += `    # Test if the Support Request Contributor role is assigned to Foreign Principal HelpDeskAgents:\n`;
        body += `    $supportRole = Get-AzRoleAssignment -ObjectId b6770181-d9f5-4818-b5b1-ea51cd9f66e5 | Where-Object { $_.RoleDefinitionName -eq "Support Request Contributor" } \n`;
        body += `    if ($supportRole) {\n`;
        body += `        Write-Host "Support Request Contributor role is assigned to Foreign Principal HelpDeskAgents." \n`;
        body += `        # Test if the Owner role for the Foreign Principal AdminAgents exists:\n`;
        body += `        $ownerRole = Get-AzRoleAssignment -ObjectId 9a838974-22d3-415b-8136-c790e285afeb | Where-Object { $_.RoleDefinitionName -eq "Owner" } \n`;
        body += `        if ($ownerRole) {\n`;
        body += `            # If the Owner role for Foreign Principal AdminAgents exists, remove it:\n`;
        body += `            Remove-AzRoleAssignment -ObjectID 9a838974-22d3-415b-8136-c790e285afeb -RoleDefinitionName "Owner"\n`;
        body += `        } else {\n`;
        body += `            Write-Host "Owner role for Foreign Principal AdminAgents does not exist."\n`;
        body += `        }\n`;
        body += `    } else {\n`;
        body += `        Write-Host "Error: Could not assign Support Request Contributor role for Foreign Principal HelpDeskAgents!"\n`;
        body += `    }\n`;
        body += `}\n\n`;
        
        body += this.translate('rbacScreenshot', language) + '\n\n';
      }
    }
    
    // Conditional Access Section
    if (formData.conditionalAccess.checked) {
      body += `**${this.translate('conditionalAccessTitle', language)}**\n\n`;
      
      body += this.translate('conditionalAccessIntro', language) + '\n\n';
      
      if (formData.conditionalAccess.mfa) {
        body += `• ${this.translate('mfaPolicy', language)}\n`;
      }
      if (formData.conditionalAccess.location) {
        body += `• ${this.translate('locationPolicy', language)}\n`;
      }
      if (formData.conditionalAccess.device) {
        body += `• ${this.translate('devicePolicy', language)}\n`;
      }
      if (formData.conditionalAccess.signIn) {
        body += `• ${this.translate('signInPolicy', language)}\n`;
      }
      
      body += '\n';
    }
    
    // Additional Notes Section
    if (formData.additionalNotes) {
      body += `**${this.translate('additionalInfoTitle', language)}**\n\n`;
      body += `${formData.additionalNotes}\n\n`;
    }
    
    // Closing
    body += this.translate('closing', language) + '\n\n';
    body += this.translate('regards', language) + '\n\n';
    body += `${formData.senderName}\n`;
    body += `${formData.senderTitle}\n`;
    body += `${formData.senderCompany}\n`;
    
    if (formData.senderContact) {
      body += `${formData.senderContact}\n`;
    }
    
    return body;
  },
  
  /**
   * Build HTML version of the email with improved clarity and instructions
   * @param {EmailFormData} formData - The form data from the UI
   * @returns {String} - HTML formatted email content
   */
  buildEmailHTML: function(formData: EmailFormData): string {
    // Get the selected tier and language
    const tier = supportTiers[formData.selectedTier];
    const language = (formData.language || 'en') as Language;
    
    // Get tier color
    let tierColor = '';
    switch(formData.selectedTier) {
      case 'bronze': tierColor = '#cd7f32'; break;
      case 'silver': tierColor = '#C0C0C0'; break;
      case 'gold': tierColor = '#FFD700'; break;
      case 'platinum': tierColor = '#E5E4E2'; break;
    }

    // Generate subject if not provided
    const subject = formData.subject || this.translate('subject', language, {
      tier: tier.name,
      company: formData.companyName
    });
    
    // Build the full HTML email
    let htmlContent = `<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>${subject}</title>
    <!--[if mso]>
    <xml>
      <o:OfficeDocumentSettings>
        <o:AllowPNG/>
        <o:PixelsPerInch>96</o:PixelsPerInch>
      </o:OfficeDocumentSettings>
    </xml>
    <style type="text/css">
      table {border-collapse: collapse; mso-table-lspace: 0pt; mso-table-rspace: 0pt;}
      h1, h2, h3, h4, h5, h6, p, div, span {font-family: 'Segoe UI', Arial, sans-serif;}
      .mso-text-raise-4 {mso-text-raise: 4pt;}
      .mso-text-raise-7 {mso-text-raise: 7pt;}
    </style>
    <![endif]-->
</head>
<body style="margin: 0; padding: 0; font-family: 'Segoe UI', Arial, sans-serif; line-height: 1.6; color: #333; background-color: #ffffff;">
    <div style="max-width: 800px; margin: 0 auto; padding: 20px;">
        <!-- Email Header -->
        <table width="100%" cellpadding="0" cellspacing="0" border="0" style="border-collapse: collapse; margin-bottom: 30px; border-bottom: 1px solid #eee;">
            <tr>
                <td style="padding: 0 0 20px 0;">
                    <h1 style="margin: 0; padding: 0; font-size: 24px; font-weight: 700; color: #333; font-family: 'Segoe UI', Arial, sans-serif;">
                        <span style="font-weight: bold; color: #0078D4;">${formData.senderCompany.toUpperCase()}</span> 
                        <span style="color: #333;">| ${tier.name} ${this.translate('supportPlanTitle', language, { tier: '' }).trim()}</span>
                    </h1>
                </td>
            </tr>
            <tr>
                <td style="padding: 0 0 5px 0; font-family: 'Segoe UI', Arial, sans-serif; font-size: 14px;">
                    <strong style="font-weight: 600;">To:</strong> ${formData.to}
                </td>
            </tr>
            ${formData.cc ? `
            <tr>
                <td style="padding: 0 0 5px 0; font-family: 'Segoe UI', Arial, sans-serif; font-size: 14px;">
                    <strong style="font-weight: 600;">Cc:</strong> ${formData.cc}
                </td>
            </tr>` : ''}
            <tr>
                <td style="padding: 0 0 5px 0; font-family: 'Segoe UI', Arial, sans-serif; font-size: 14px;">
                    <strong style="font-weight: 600;">Subject:</strong> ${subject}
                </td>
            </tr>
            <tr>
                <td style="padding: 0 0 5px 0; font-family: 'Segoe UI', Arial, sans-serif; font-size: 14px;">
                    <strong style="font-weight: 600;">Date:</strong> ${formData.currentDate}
                </td>
            </tr>
        </table>
        
        <!-- Email Body -->
        <table width="100%" cellpadding="0" cellspacing="0" border="0" style="border-collapse: collapse;">
            <tr>
                <td style="padding: 0; font-family: 'Segoe UI', Arial, sans-serif; font-size: 14px;">
                    <!-- Greeting -->
                    <p style="margin: 0 0 15px 0; line-height: 1.6; font-family: 'Segoe UI', Arial, sans-serif; font-size: 15px;">
                      ${this.translate('greeting', language, { name: formData.contactName })}
                    </p>
                    
                    <p style="margin: 0 0 15px 0; line-height: 1.6; font-family: 'Segoe UI', Arial, sans-serif; font-size: 15px;">
                      ${this.translate('intro1', language, { 
                        company: formData.senderCompany,
                        clientCompany: formData.companyName
                      })}
                    </p>
                    
                    <p style="margin: 0 0 25px 0; line-height: 1.6; font-family: 'Segoe UI', Arial, sans-serif; font-size: 15px;">
                      ${this.translate('intro2', language, { tier: tier.name })}
                    </p>`;
    
    // Support Plan Section with tier-specific styling
    htmlContent += `
                    <!-- Support Plan Section -->
                    <table width="100%" cellpadding="0" cellspacing="0" border="0" style="border-collapse: collapse; margin-bottom: 5px; background-color: ${tierColor}; border-radius: 4px;">
                        <tr>
                            <td style="padding: 14px 18px; text-align: center; font-family: 'Segoe UI', Arial, sans-serif;">
                                <h2 style="margin: 0; padding: 0; color: white; font-size: 18px; font-weight: 600;">
                                  ${this.translate('supportPlanTitle', language, { tier: tier.name.toUpperCase() })}
                                </h2>
                            </td>
                        </tr>
                    </table>
                    
                    <p style="margin: 25px 0 15px 0; line-height: 1.6; font-family: 'Segoe UI', Arial, sans-serif; font-size: 15px;">
                      ${this.translate('supportPlanIntro', language, { 
                        tier: tier.name,
                        supportType: formData.selectedTier === 'bronze' 
                          ? this.translate('supportType.bronze', language)
                          : this.translate('supportType.other', language)
                      })}
                    </p>
                    
                    <table width="100%" cellpadding="0" cellspacing="0" border="0" style="border-collapse: collapse; margin: 15px 0 25px 0; border: 1px solid #eee; border-radius: 4px;">
                        <tr>
                            <td style="padding: 18px 20px;">
                                <table width="100%" cellpadding="0" cellspacing="0" border="0" style="border-collapse: collapse;">
                                    <tr>
                                        <td style="padding: 8px 0; font-family: 'Segoe UI', Arial, sans-serif; line-height: 1.6;">
                                            <span style="display: inline-block; width: 8px; height: 8px; border-radius: 50%; background-color: ${tierColor}; margin-right: 10px;"></span>
                                            <strong style="font-weight: 600; color: #333;">${this.translate('supportTypeLabel', language)}</strong> 
                                            ${formData.selectedTier === 'bronze' ? 'Microsoft Flexible Support' : 'Microsoft Premier Support'}
                                        </td>
                                    </tr>
                                    <tr>
                                        <td style="padding: 8px 0; font-family: 'Segoe UI', Arial, sans-serif; line-height: 1.6;">
                                            <span style="display: inline-block; width: 8px; height: 8px; border-radius: 50%; background-color: ${tierColor}; margin-right: 10px;"></span>
                                            <strong style="font-weight: 600; color: #333;">${this.translate('supportHoursLabel', language)}</strong> 
                                            ${tier.supportHours}
                                        </td>
                                    </tr>
                                    <tr>
                                        <td style="padding: 8px 0; font-family: 'Segoe UI', Arial, sans-serif; line-height: 1.6;">
                                            <span style="display: inline-block; width: 8px; height: 8px; border-radius: 50%; background-color: ${tierColor}; margin-right: 10px;"></span>
                                            <strong style="font-weight: 600; color: #333;">${this.translate('severityLevelsLabel', language)}</strong> 
                                            ${formData.selectedTier === 'bronze' ? 'Level B or C' : 'Level A, B or C'}
                                        </td>
                                    </tr>
                                    <tr>
                                        <td style="padding: 8px 0; font-family: 'Segoe UI', Arial, sans-serif; line-height: 1.6;">
                                            <span style="display: inline-block; width: 8px; height: 8px; border-radius: 50%; background-color: ${tierColor}; margin-right: 10px;"></span>
                                            <strong style="font-weight: 600; color: #333;">${this.translate('contactsLabel', language)}</strong> 
                                            ${tier.authorizedContacts}
                                        </td>
                                    </tr>
                                    <tr>
                                        <td style="padding: 8px 0; font-family: 'Segoe UI', Arial, sans-serif; line-height: 1.6;">
                                            <span style="display: inline-block; width: 8px; height: 8px; border-radius: 50%; background-color: ${tierColor}; margin-right: 10px;"></span>
                                            <strong style="font-weight: 600; color: #333;">${this.translate('tenantsLabel', language)}</strong> 
                                            ${tier.tenants}
                                        </td>
                                    </tr>
                                    <tr>
                                        <td style="padding: 8px 0; font-family: 'Segoe UI', Arial, sans-serif; line-height: 1.6;">
                                            <span style="display: inline-block; width: 8px; height: 8px; border-radius: 50%; background-color: ${tierColor}; margin-right: 10px;"></span>
                                            <strong style="font-weight: 600; color: #333;">${this.translate('requestsLabel', language)}</strong> 
                                            ${tier.supportRequestsIncluded}
                                        </td>
                                    </tr>
                                    <tr>
                                        <td style="padding: 8px 0; font-family: 'Segoe UI', Arial, sans-serif; line-height: 1.6;">
                                            <span style="display: inline-block; width: 8px; height: 8px; border-radius: 50%; background-color: ${tierColor}; margin-right: 10px;"></span>
                                            <strong style="font-weight: 600; color: #333;">${this.translate('criticalLabel', language)}</strong> 
                                            ${tier.criticalSituation 
                                                ? '<span style="color: #107c10; font-weight: 600;">' + this.translate('yes', language) + '</span>' 
                                                : '<span style="color: #d83b01; font-weight: 600;">' + this.translate('no', language) + '</span>'}
                                        </td>
                                    </tr>
                                </table>
                            </td>
                        </tr>
                    </table>`;
    
    // Authorized Contacts Section
    if (formData.authorizedContacts.checked) {
        const contactsSectionTitle = this.translate('authorizedContactsTitle', language);
        htmlContent += this.createSectionHeader(contactsSectionTitle, tierColor);
        
        htmlContent += `
                    <p style="margin: 0 0 15px 0; line-height: 1.6; font-family: 'Segoe UI', Arial, sans-serif; font-size: 15px;">
                      ${this.translate('contactsIntro', language, { 
                        tier: tier.name,
                        count: tier.authorizedContacts
                      })}
                    </p>
                    
                    <p style="margin: 0 0 15px 0; line-height: 1.6; font-family: 'Segoe UI', Arial, sans-serif; font-size: 15px;">
                      ${this.translate('contactsRolesIntro', language, { 
                        roles: `<strong style="font-weight: 600;">${formData.authorizedContacts.roles}</strong>`
                      })}
                    </p>
                    
                    <p style="margin: 0 0 15px 0; line-height: 1.6; font-family: 'Segoe UI', Arial, sans-serif; font-size: 15px;">
                      ${this.translate('contactsInstruction', language)}
                    </p>
                    
                    ${this.createContactsTable(tier.authorizedContacts, language)}`;
    }
    
    // Meeting Section
    if (formData.meetingDate) {
        const meetingSectionTitle = this.translate('meetingTitle', language);
        htmlContent += this.createSectionHeader(meetingSectionTitle, tierColor);
        
        htmlContent += `
                    <p style="margin: 0 0 15px 0; line-height: 1.6; font-family: 'Segoe UI', Arial, sans-serif; font-size: 15px;">
                      ${this.translate('meetingIntro', language)}
                    </p>
                    
                    <table width="100%" cellpadding="0" cellspacing="0" border="0" style="border-collapse: collapse; margin: 20px 0; background-color: #f8f8f8; border: 1px solid #eee; border-radius: 4px;">
                        <tr>
                            <td style="padding: 16px 20px; font-family: 'Segoe UI', Arial, sans-serif; font-size: 15px;">
                                <strong style="font-weight: 600; color: #333;">${this.translate('meetingDate', language, { date: `<span style="color: #0078D4;">${formData.meetingDate}</span>` })}</strong>
                            </td>
                        </tr>
                    </table>
                    
                    <p style="margin: 0 0 20px 0; line-height: 1.6; font-family: 'Segoe UI', Arial, sans-serif; font-size: 15px;">
                      ${this.translate('meetingAttendees', language)}
                    </p>`;
    }
    
    // GDAP Section
    if (formData.gdap.checked) {
        const gdapSectionTitle = this.translate('gdapTitle', language);
        htmlContent += this.createSectionHeader(gdapSectionTitle, tierColor);
        
        htmlContent += `
                    <p style="margin: 0 0 15px 0; line-height: 1.6; font-family: 'Segoe UI', Arial, sans-serif; font-size: 15px;">
                      ${this.translate('gdapIntro', language, { deadline: `<strong style="font-weight: 600;">${formData.gdap.deadline}</strong>` })}
                      ${this.translate('gdapRoles', language, { roles: `<strong style="font-weight: 600;">${formData.gdap.roles}</strong>` })}
                    </p>
                    
                    <p style="margin: 0 0 15px 0; line-height: 1.6; font-family: 'Segoe UI', Arial, sans-serif; font-size: 15px;">
                      ${this.translate('gdapPermission', language)}
                    </p>
                    
                    <table width="100%" cellpadding="0" cellspacing="0" border="0" style="border-collapse: collapse; margin: 20px 0; background-color: #f8f8f8; border: 1px solid #eee; border-radius: 4px;">
                        <tr>
                            <td style="padding: 16px 20px; font-family: 'Segoe UI', Arial, sans-serif; font-size: 15px;">
                                <p style="margin: 0 0 10px 0; font-weight: 600; color: #333;">
                                ${this.translate('gdapInstruction', language)}
                                </p>
                                <p style="margin: 0; text-align: center;">
                                  <a href="${formData.gdap.link}" target="_blank" style="display: inline-block; padding: 10px 24px; background-color: #0078D4; color: white; text-decoration: none; font-weight: 600; border-radius: 4px; margin-top: 5px;">
                                    ${this.translate('gdapLink', language)}
                                  </a>
                                </p>
                            </td>
                        </tr>
                    </table>`;
    }
    
    // RBAC Section
    if (formData.rbac.checked) {
        const rbacSectionTitle = this.translate('rbacTitle', language);
        htmlContent += this.createSectionHeader(rbacSectionTitle, tierColor);
        
        let permissionText = '';
        if (formData.rbac.azure && formData.rbac.m365) {
            permissionText = this.translate('rbacPermissionBoth', language);
        } else if (formData.rbac.azure) {
            permissionText = this.translate('rbacPermissionAzure', language);
        } else if (formData.rbac.m365) {
            permissionText = this.translate('rbacPermission365', language);
        }
        
        htmlContent += `
                    <p style="margin: 0 0 20px 0; line-height: 1.6; font-family: 'Segoe UI', Arial, sans-serif; font-size: 15px;">
                      ${this.translate('rbacIntro', language, { groups: `<strong style="font-weight: 600;">${formData.rbac.groups}</strong>` })}
                      ${permissionText}
                    </p>`;
        
        if (formData.rbac.includeScript) {
            htmlContent += `
                    <p style="margin: 15px 0; line-height: 1.6; font-family: 'Segoe UI', Arial, sans-serif; font-size: 16px; font-weight: 600; color: #333;">
                      ${this.translate('rbacInstruction', language)}
                    </p>`;
            
            // Step 1 - Install Azure PowerShell
            htmlContent += this.createStepIndicator(1, this.translate('rbacStep1', language));
            
            htmlContent += `
                    <p style="margin: 5px 0 15px 48px; line-height: 1.6; font-family: 'Segoe UI', Arial, sans-serif; font-size: 15px;">
                      ${this.translate('rbacStep1Source', language)} 
                      <a href="https://docs.microsoft.com/en-us/powershell/azure/install-az-ps?view=azps-6.6.0" target="_blank" style="color: #0078D4; text-decoration: underline;">
                        https://docs.microsoft.com/en-us/powershell/azure/install-az-ps?view=azps-6.6.0
                      </a>
                    </p>`;
            
            // Install script
            htmlContent += `<div style="margin-left: 48px;">
                      ${this.formatScriptBlock('Install-Module -Name Az -Repository PSGallery -Force', language)}
                    </div>`;
            
            htmlContent += `
                    <p style="margin: 15px 0 15px 48px; line-height: 1.6; font-family: 'Segoe UI', Arial, sans-serif; font-size: 15px;">
                      or update it:
                    </p>`;
            
            // Update script
            htmlContent += `<div style="margin-left: 48px;">
                      ${this.formatScriptBlock('Update-Module Az.Resources -Force', language)}
                    </div>`;
            
            // Step 2 - Run the script
            htmlContent += this.createStepIndicator(2, this.translate('rbacStep2', language));
            
            htmlContent += `
                    <p style="margin: 5px 0 15px 48px; line-height: 1.6; font-family: 'Segoe UI', Arial, sans-serif; font-size: 15px;">
                      ${this.translate('rbacStep2Instruction', language)}
                    </p>`;
            
            // The main RBAC script
            htmlContent += `<div style="margin-left: 48px;">
                      ${this.formatScriptBlock(`# Connect to the correct tenant
Connect-AzAccount -TenantID ${formData.rbac.tenantId}

$subscriptions = Get-AzSubscription
foreach ($subscription in $subscriptions) {
    Set-AzContext -SubscriptionId $subscription.Id 
    # Add the Support Request Contributor role to Foreign Principal HelpDeskAgents:
    New-AzRoleAssignment -ObjectID b6770181-d9f5-4818-b5b1-ea51cd9f66e5 -RoleDefinitionName "Support Request Contributor" -ObjectType "ForeignGroup" -ErrorAction SilentlyContinue 
    # Test if the Support Request Contributor role is assigned to Foreign Principal HelpDeskAgents:
    $supportRole = Get-AzRoleAssignment -ObjectId b6770181-d9f5-4818-b5b1-ea51cd9f66e5 | Where-Object { $_.RoleDefinitionName -eq "Support Request Contributor" } 
    if ($supportRole) {
        Write-Host "Support Request Contributor role is assigned to Foreign Principal HelpDeskAgents." 
        # Test if the Owner role for the Foreign Principal AdminAgents exists:
        $ownerRole = Get-AzRoleAssignment -ObjectId 9a838974-22d3-415b-8136-c790e285afeb | Where-Object { $_.RoleDefinitionName -eq "Owner" } 
        if ($ownerRole) {
            # If the Owner role for Foreign Principal AdminAgents exists, remove it:
            Remove-AzRoleAssignment -ObjectID 9a838974-22d3-415b-8136-c790e285afeb -RoleDefinitionName "Owner"
        } else {
            Write-Host "Owner role for Foreign Principal AdminAgents does not exist."
        }
    } else {
        Write-Host "Error: Could not assign Support Request Contributor role for Foreign Principal HelpDeskAgents!"
    }
}`, language)}
                    </div>`;
            
            htmlContent += `
                    <p style="margin: 20px 0 15px 48px; line-height: 1.6; font-family: 'Segoe UI', Arial, sans-serif; font-size: 15px; color: #333;">
                      ${this.translate('rbacScreenshot', language)}
                    </p>`;
        }
    }
    
    // Conditional Access Section
    if (formData.conditionalAccess.checked) {
        const caSectionTitle = this.translate('conditionalAccessTitle', language);
        htmlContent += this.createSectionHeader(caSectionTitle, tierColor);
        
        htmlContent += `
                    <p style="margin: 0 0 15px 0; line-height: 1.6; font-family: 'Segoe UI', Arial, sans-serif; font-size: 15px;">
                      ${this.translate('conditionalAccessIntro', language)}
                    </p>
                    
                    <table width="100%" cellpadding="0" cellspacing="0" border="0" style="border-collapse: collapse; margin: 0 0 20px 0; background-color: #f8f8f8; border: 1px solid #eee; border-radius: 4px;">
                        <tr>
                            <td style="padding: 16px 20px;">
                                <table width="100%" cellpadding="0" cellspacing="0" border="0" style="border-collapse: collapse;">`;
        
        if (formData.conditionalAccess.mfa) {
            htmlContent += `
                                    <tr>
                                        <td style="padding: 8px 0; font-family: 'Segoe UI', Arial, sans-serif; line-height: 1.6; display: flex; align-items: flex-start;">
                                            <span style="display: inline-block; min-width: 8px; height: 8px; border-radius: 50%; background-color: #0078D4; margin-right: 10px; margin-top: 7px;"></span>
                                            <span style="font-family: 'Segoe UI', Arial, sans-serif; font-size: 15px;">${this.translate('mfaPolicy', language)}</span>
                                        </td>
                                    </tr>`;
        }
        
        if (formData.conditionalAccess.location) {
            htmlContent += `
                                    <tr>
                                        <td style="padding: 8px 0; font-family: 'Segoe UI', Arial, sans-serif; line-height: 1.6; display: flex; align-items: flex-start;">
                                            <span style="display: inline-block; min-width: 8px; height: 8px; border-radius: 50%; background-color: #0078D4; margin-right: 10px; margin-top: 7px;"></span>
                                            <span style="font-family: 'Segoe UI', Arial, sans-serif; font-size: 15px;">${this.translate('locationPolicy', language)}</span>
                                        </td>
                                    </tr>`;
        }
        
        if (formData.conditionalAccess.device) {
            htmlContent += `
                                    <tr>
                                        <td style="padding: 8px 0; font-family: 'Segoe UI', Arial, sans-serif; line-height: 1.6; display: flex; align-items: flex-start;">
                                            <span style="display: inline-block; min-width: 8px; height: 8px; border-radius: 50%; background-color: #0078D4; margin-right: 10px; margin-top: 7px;"></span>
                                            <span style="font-family: 'Segoe UI', Arial, sans-serif; font-size: 15px;">${this.translate('devicePolicy', language)}</span>
                                        </td>
                                    </tr>`;
        }
        
        if (formData.conditionalAccess.signIn) {
            htmlContent += `
                                    <tr>
                                        <td style="padding: 8px 0; font-family: 'Segoe UI', Arial, sans-serif; line-height: 1.6; display: flex; align-items: flex-start;">
                                            <span style="display: inline-block; min-width: 8px; height: 8px; border-radius: 50%; background-color: #0078D4; margin-right: 10px; margin-top: 7px;"></span>
                                            <span style="font-family: 'Segoe UI', Arial, sans-serif; font-size: 15px;">${this.translate('signInPolicy', language)}</span>
                                        </td>
                                    </tr>`;
        }
        
        htmlContent += `
                                </table>
                            </td>
                        </tr>
                    </table>`;
    }
    
    // Additional Notes Section
    if (formData.additionalNotes) {
        const additionalInfoTitle = this.translate('additionalInfoTitle', language);
        htmlContent += this.createSectionHeader(additionalInfoTitle, tierColor);
        
        // Process line breaks in the notes to preserve formatting
        const formattedNotes = formData.additionalNotes.replace(/\n/g, '<br>');
        
        htmlContent += `
                    <p style="margin: 0 0 20px 0; line-height: 1.6; font-family: 'Segoe UI', Arial, sans-serif; font-size: 15px;">
                      ${formattedNotes}
                    </p>`;
    }
    
    // Closing and Footer
    htmlContent += `
                    <p style="margin: 30px 0 20px 0; line-height: 1.6; font-family: 'Segoe UI', Arial, sans-serif; font-size: 15px;">
                      ${this.translate('closing', language)}
                    </p>
                    
                    <table width="100%" cellpadding="0" cellspacing="0" border="0" style="border-collapse: collapse; margin-top: 40px;">
                        <tr>
                            <td style="padding: 0;">
                                <p style="margin: 0 0 10px 0; line-height: 1.6; font-family: 'Segoe UI', Arial, sans-serif; font-size: 15px;">
                                    ${this.translate('regards', language)}
                                </p>
                                <p style="margin: 0; line-height: 1.6; font-family: 'Segoe UI', Arial, sans-serif; font-size: 15px;">
                                    <strong style="font-weight: 600;">${formData.senderName}</strong><br>
                                    ${formData.senderTitle}<br>
                                    ${formData.senderCompany}<br>
                                    ${formData.senderContact || ''}
                                </p>
                            </td>
                        </tr>
                    </table>
                </td>
            </tr>
        </table>
        
        <table width="100%" cellpadding="0" cellspacing="0" border="0" style="border-collapse: collapse; margin-top: 40px; border-top: 1px solid #eee;">
            <tr>
                <td style="padding: 20px 0 0 0; font-family: 'Segoe UI', Arial, sans-serif; font-size: 12px; color: #666; text-align: center;">
                    <p style="margin: 0; line-height: 1.5;">
                        ${this.translate('footer', language)}
                    </p>
                </td>
            </tr>
        </table>
    </div>
</body>
</html>`;
    
    return htmlContent;
  },
  
  /**
   * Get HTML formatted text description for the selected support plan
   */
  getSupportPlanTextHTML: function(planType: string, language: Language = 'en'): string {
    const supportPlanIntro = this.translate('supportPlanIntro', language, { 
      tier: supportTiers[planType].name,
      supportType: planType === 'bronze' 
        ? this.translate('supportType.bronze', language)
        : this.translate('supportType.other', language)
    });

    let bulletItems = '';
    switch(planType) {
      case 'bronze':
        bulletItems = `
<ul style="padding-left: 20px; margin: 0 0 15px 0;">
  <li style="margin-bottom: 8px; font-family: 'Segoe UI', Arial, sans-serif;">Microsoft Flexible Support</li>
  <li style="margin-bottom: 8px; font-family: 'Segoe UI', Arial, sans-serif;">8×5 Support Hours</li>
  <li style="margin-bottom: 8px; font-family: 'Segoe UI', Arial, sans-serif;">Level B or C Severity</li>
  <li style="margin-bottom: 8px; font-family: 'Segoe UI', Arial, sans-serif;">2 Customer Contacts</li>
  <li style="margin-bottom: 8px; font-family: 'Segoe UI', Arial, sans-serif;">1 Tenant</li>
  <li style="margin-bottom: 8px; font-family: 'Segoe UI', Arial, sans-serif;">Pay As You Go support requests</li>
</ul>`;
          break;
          
      case 'silver':
        bulletItems = `
<ul style="padding-left: 20px; margin: 0 0 15px 0;">
  <li style="margin-bottom: 8px; font-family: 'Segoe UI', Arial, sans-serif;">Microsoft Premier Support</li>
  <li style="margin-bottom: 8px; font-family: 'Segoe UI', Arial, sans-serif;">24×7×365 Support Hours</li>
  <li style="margin-bottom: 8px; font-family: 'Segoe UI', Arial, sans-serif;">Level A, B or C Severity</li>
  <li style="margin-bottom: 8px; font-family: 'Segoe UI', Arial, sans-serif;">6 Customer Contacts</li>
  <li style="margin-bottom: 8px; font-family: 'Segoe UI', Arial, sans-serif;">2 Tenants</li>
  <li style="margin-bottom: 8px; font-family: 'Segoe UI', Arial, sans-serif;">12 Support Requests Included per trailing 12-month period</li>
</ul>`;
          break;
          
      case 'gold':
        bulletItems = `
<ul style="padding-left: 20px; margin: 0 0 15px 0;">
  <li style="margin-bottom: 8px; font-family: 'Segoe UI', Arial, sans-serif;">Microsoft Premier Support</li>
  <li style="margin-bottom: 8px; font-family: 'Segoe UI', Arial, sans-serif;">24×7×365 Support Hours</li>
  <li style="margin-bottom: 8px; font-family: 'Segoe UI', Arial, sans-serif;">Level A, B or C Severity</li>
  <li style="margin-bottom: 8px; font-family: 'Segoe UI', Arial, sans-serif;">12 Customer Contacts</li>
  <li style="margin-bottom: 8px; font-family: 'Segoe UI', Arial, sans-serif;">6 Tenants</li>
  <li style="margin-bottom: 8px; font-family: 'Segoe UI', Arial, sans-serif;">36 Support Requests Included per trailing 12-month period</li>
</ul>`;
          break;
          
      case 'platinum':
        bulletItems = `
<ul style="padding-left: 20px; margin: 0 0 15px 0;">
  <li style="margin-bottom: 8px; font-family: 'Segoe UI', Arial, sans-serif;">Microsoft Premier Support</li>
  <li style="margin-bottom: 8px; font-family: 'Segoe UI', Arial, sans-serif;">24×7×365 Support Hours</li>
  <li style="margin-bottom: 8px; font-family: 'Segoe UI', Arial, sans-serif;">Level A, B or C Severity</li>
  <li style="margin-bottom: 8px; font-family: 'Segoe UI', Arial, sans-serif;">100 Customer Contacts</li>
  <li style="margin-bottom: 8px; font-family: 'Segoe UI', Arial, sans-serif;">100 Tenants</li>
  <li style="margin-bottom: 8px; font-family: 'Segoe UI', Arial, sans-serif;">100 Support Requests Included per trailing 12-month period</li>
</ul>`;
          break;
          
      default:
        bulletItems = '';
    }
    
    return `${supportPlanIntro}<br><br>${bulletItems}`;
  },
  
  /**
   * Process form data into a structured email object
   */
  processCustomerInfoToEmailData: function(info: CustomerInfo, language: string = 'en'): EmailFormData {
    const tier = supportTiers[info.selectedTier];
    
    // Handle date calculation safely
    const today = new Date();
    const futureDate = new Date();
    futureDate.setDate(today.getDate() + 30);
    
    // Format today's date
    const currentDate = today.toLocaleDateString();
    
    // Format meeting date if it exists
    let meetingDateStr;
    if (info.proposedDate instanceof Date && !isNaN(info.proposedDate.getTime())) {
      meetingDateStr = info.proposedDate.toLocaleDateString();
    }
    
    const formData: EmailFormData = {
      companyName: info.companyName,
      contactName: info.contactName,
      contactEmail: info.contactEmail,
      proposedDate: info.proposedDate,
      tenantId: info.tenantId,
      selectedTier: info.selectedTier,
      emailContacts: info.authorizedContacts,
      to: info.contactEmail || '',
      cc: '',
      subject: this.translate('subject', language as Language, {
        tier: tier.name,
        company: info.companyName
      }),
      gdap: {
        checked: true,
        deadline: futureDate.toLocaleDateString(),
        roles: "Service Support Administrator",
        link: "https://partner.microsoft.com/dashboard/commerce/granularadmin"
      },
      rbac: {
        checked: true,
        groups: 'appropriate security groups',
        tenantId: info.tenantId || '[your-tenant-id]',
        azure: true,
        m365: true,
        includeScript: true
      },
      conditionalAccess: {
        checked: true,
        mfa: true,
        location: true,
        device: true,
        signIn: true
      },
      authorizedContacts: {
        checked: true,
        roles: 'Technical and Administrative contacts'
      },
      meetingDate: meetingDateStr,
      additionalNotes: '',
      senderName: 'Your Name',
      senderTitle: 'Support Specialist',
      senderCompany: 'Microsoft Partner Support',
      senderContact: 'support@microsoftpartner.com',
      currentDate: currentDate,
      language: language
    };
    
    return formData;
  }
};

export default emailBuilder;